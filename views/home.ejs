<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ZRA Smart invoice</title>
    <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
</head>
<body class="bg-gray-50">
<div class="min-h-screen flex flex-col items-center justify-center p-4">
    <div class="bg-white rounded-lg shadow-lg w-full max-w-6xl p-6">
        <div class="mb-8 text-center">
            <h1 class="text-3xl font-bold text-gray-800">ZRA Smart invoice</h1>
            <p class="text-gray-600 mt-2">Search by date</p>
        </div>

        <form id="receiptForm" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="startDate" class="block text-sm font-medium text-gray-700 mb-1">Start date</label>
                    <input type="date" id="startDate" name="startDate"
                           class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <div id="start_date_error" style="color: #cc3737; height: 25px;"></div>
                </div>
                <div>
                    <label for="endDate" class="block text-sm font-medium text-gray-700 mb-1">End date</label>
                    <input type="date" id="endDate" name="endDate"
                           class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <div id="end_date_error" style="color: #cc3737; height: 25px;"></div>
                </div>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Receipt type</label>
                <div class="flex space-x-4">
                    <div class="flex items-center">
                        <input type="radio" id="invoice" name="receiptType" value="invoice" checked
                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300">
                        <label for="invoice" class="ml-2 text-gray-700">Invoice</label>
                    </div>
                    <div class="flex items-center">
                        <input type="radio" id="credit_note" name="receiptType" value="credit_note"
                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300">
                        <label for="credit_note" class="ml-2 text-gray-700">Credit Note</label>
                    </div>
                </div>
            </div>

            <div class="flex justify-center">
                <button type="submit"
                        class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-6 rounded-md transition duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                    Retrieve
                </button>
            </div>
        </form>

        <div class="mt-8">
            <div id="apiResponse" class="bg-gray-100 rounded-md p-4 min-h-32 border border-gray-300">
                <p class="text-gray-500 italic text-center">The result will be displayed here !</p>
            </div>
        </div>
    </div>
</div>

<script>
    document.getElementById('receiptForm').addEventListener('submit', async (event) => {
        event.preventDefault();

        let isValid = false;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const receiptType = document.querySelector('input[name="receiptType"]:checked').value;
        console.log(`receiptType => ${receiptType}`)

        const startDateError = document.querySelector('#start_date_error');
        const endDateError = document.querySelector('#end_date_error');

        if (startDate && endDate) {
            if ((isMoreThan30Days(startDate) || new Date(startDate) > new Date())) {
                startDateError.innerHTML = `The start date can't be greater than today or lesser than 30 days before`
                isValid = false
            } else {
                startDateError.innerHTML = ''
                isValid = true
            }

            if ((isMoreThan30Days(endDate) || new Date(endDate) > new Date())) {
                endDateError.innerHTML = `The end date can't be greater than today or lesser than 30 days before`
                isValid = false
            } else {
                endDateError.innerHTML = ''
                isValid = true
            }

            if (new Date(startDate) > new Date(endDate)) {
                startDateError.innerHTML = `The start date can't be greater than the end date`
                isValid = false
            } else {
                startDateError.innerHTML = ''
                isValid = true
            }
        }

        if (isValid) {
            document.querySelector('button[type="submit"]').disabled = true
            const responseDiv = document.getElementById('apiResponse');

            try {
                responseDiv.innerHTML = '<p class="text-center">Loading...</p>';
                const response = await fetch(`/${receiptType}`, {
                    method: 'POST',
                    headers: {
                        'Content-type': 'application/json'
                    },
                    body: JSON.stringify({ startDate, endDate })
                }).then(response => response.json())
                responseDiv.innerHTML = JSON.stringify(response);
                document.querySelector('button[type="submit"]').disabled = false
            } catch (e) {
                responseDiv.innerHTML = 'Error while retrieving invoices'
                document.querySelector('button[type="submit"]').disabled = false
            }
        }

        function isMoreThan30Days(inputDate) {
            const today = new Date();
            const thirtyDaysBefore = new Date();
            thirtyDaysBefore.setDate(today.getDate() - 30);

            return new Date(inputDate) < thirtyDaysBefore;
        }
    });
</script>
</body>
</html>