<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ZRA Smart invoice</title>
    <script src="https://unpkg.com/@tailwindcss/browser@4"></script>
</head>
<body class="bg-gray-50">
<style>
    .spinner {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        position: relative;
        animation: rotate 1s linear infinite;
    }

    .spinner::before {
        content: "";
        box-sizing: border-box;
        position: absolute;
        inset: 0px;
        border-radius: 50%;
        border: 3px solid transparent;
        border-top-color: #FF3E3E;
        border-right-color: #4285F4;
        border-bottom-color: #34A853;
        border-left-color: #FBBC05;
    }

    @keyframes rotate {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
<div class="min-h-screen flex flex-col items-center justify-center p-4">
    <div class="bg-white w-full h-screen p-6">
        <div class="mb-8 text-center">
            <h1 class="text-3xl font-bold text-gray-800">ZRA Smart invoice</h1>
            <p class="text-gray-600 mt-2">Search by date</p>
        </div>

        <form id="receiptForm" class="space-y-6">
            <div>
                <div class="flex space-x-4">
                    <div class="flex flex-col items-start">
                        <label for="startDate" class="block text-sm font-medium text-gray-700 mb-1">Start date</label>
                        <input type="date" id="startDate" name="startDate"
                               class="w-full px-4 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <div id="start_date_error" style="color: #cc3737; height: 25px;"></div>
                    </div>
                    <div class="flex flex-col items-start">
                        <label for="endDate" class="block text-sm font-medium text-gray-700 mb-1">End date</label>
                        <input type="date" id="endDate" name="endDate"
                               class="w-full px-4 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <div id="end_date_error" style="color: #cc3737; height: 25px;"></div>
                    </div>
                    <div class="flex flex-col justify-center">
                        <button type="submit"
                                class="bg-[#438eb9] hover:bg-[#2f6787] text-white font-medium py-2 px-6 rounded-sm transition duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                            Retrieve
                        </button>
                    </div>
                </div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Receipt type</label>
                <div class="flex space-x-4">
                    <div class="flex items-center">
                        <input type="radio" id="invoice" name="receiptType" value="invoice" checked
                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300">
                        <label for="invoice" class="ml-2 text-gray-700">Invoice</label>
                    </div>
                    <div class="flex items-center">
                        <input type="radio" id="credit_note" name="receiptType" value="credit_note"
                               class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300">
                        <label for="credit_note" class="ml-2 text-gray-700">Credit Note</label>
                    </div>
                </div>
            </div>
        </form>

        <div class="mt-8">
            <table class="w-full table-auto text-left text-[13px] text-gray-500 border border-gray-200">
                <thead data-slot="TableHeader" class="sticky top-0 bg-gray-50 text-sm capitalize">
                    <tr id="table_header">
                        <th scope="col" class="text-blue-550 p-4 border-none font-semibold cursor-pointer">
                            <span class="flex items-center">Date</span>
                        </th>
                        <th scope="col" class="text-blue-550 p-4 border-none font-semibold cursor-pointer">
                            <span class="flex items-center">Invoice number#</span>
                        </th>
                        <th scope="col" class="text-blue-550 p-4 border-none font-semibold cursor-pointer">
                            <span class="flex items-center">Customer</span>
                        </th>
                        <th scope="col" class="text-blue-550 p-4 border-none font-semibold cursor-pointer">
                            <span class="flex items-center">Status</span>
                        </th>
                        <th scope="col" class="text-blue-550 p-4 border-none font-semibold cursor-pointer">
                            <span class="flex items-center">Due date</span>
                        </th>
                        <th scope="col" class="text-blue-550 p-4 border-none font-semibold cursor-pointer">
                            <span class="flex items-center">Amount</span>
                        </th>
                        <th scope="col" class="text-blue-550 p-4 border-none font-semibold cursor-pointer">
                            <span class="flex items-center">Balance</span>
                        </th>
                    </tr>
                </thead>
                <tbody id="table_body" class="overflow-scroll">
                </tbody>
            </table>
            <div class="w-screen flex justify-center p-10 hidden" id="spinner_container">
                <div class="spinner"></div>
            </div>
            <div id="query_error" class="w-screen flex justify-center text-red-600 my-3"></div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 block" id="action">
                <div class="mt-3 flex flex-wrap items-center -space-x-px text-black">
                    <div class="mr-3"><select class="border p-2 text-red-800 hover:border-blue-300 focus:outline-none" name="pagination" onchange="reload(event)">
                            <option value="10">10 per pages</option>
                            <option value="15">15 per pages</option>
                            <option value="20">20 per pages</option>
                            <option value="25">25 per pages</option>
                            <option value="50">50 per pages</option>
                            <option value="100">100 per pages</option>
                        </select></div>
                    <div>
                        <button class="opacity-50" onclick="moveToPage('previous')"><span class="sr-only">Previous</span>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"
                                 class="w-3 scale-x-100 rotate-90 fill-gray-300">
                                <path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"></path>
                            </svg>
                        </button>
                    </div>
                    <div class="-mt-1 px-3"><span id="current_page_number">1</span>-<span id="total_page_number">1</span></div>
                    <div>
                        <button class="opacity-50" onclick="moveToPage('next')"><span class="sr-only">Next</span>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"
                                 class="mr-3 w-3 scale-x-100 -rotate-90 fill-gray-300">
                                <path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"></path>
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="flex flex-wrap justify-end pt-6">
                    <button onclick="send()" class="bg-[#438eb9] hover:bg-[#2f6787] text-white font-medium py-2 px-6 rounded-sm transition duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                        Send
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let pageSize = 10;
    let pageNumber = 1;
    let total = 0;

    const current_page = document.querySelector('#current_page_number');
    const total_page = document.querySelector('#total_page_number');
    const spinner = document.querySelector('#spinner_container');
    const action_buttons = document.querySelector('#action');
    const queryError = document.querySelector('#query_error');

    document.getElementById('receiptForm').addEventListener('submit', async (event) => {
        event.preventDefault();
        let isValid = false;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const receiptType = document.querySelector('input[name="receiptType"]:checked').value;

        const startDateError = document.querySelector('#start_date_error');
        const endDateError = document.querySelector('#end_date_error');

        if (startDate && endDate) {
            if ((isMoreThan30Days(startDate) || new Date(startDate) > new Date())) {
                startDateError.innerHTML = `The start date can't be greater than today or lesser than 30 days before`
                isValid = false
            } else {
                startDateError.innerHTML = ''
                isValid = true
            }

            if ((isMoreThan30Days(endDate) || new Date(endDate) > new Date())) {
                endDateError.innerHTML = `The end date can't be greater than today or lesser than 30 days before`
                isValid = false
            } else {
                endDateError.innerHTML = ''
                isValid = true
            }

            if (new Date(startDate) > new Date(endDate)) {
                startDateError.innerHTML = `The start date can't be greater than the end date`
                isValid = false
            } else {
                startDateError.innerHTML = ''
                isValid = true
            }
        }

        if (isValid) {
            pageNumber = 1;
            current_page.innerHTML = `${pageNumber}`
            await retrieve(receiptType, startDate, endDate, pageSize, 1)
        }
    });

    async function retrieve(receiptType, startDate, endDate, pageSize, pageNumber) {
        spinner.classList.replace('hidden', 'block')
        action_buttons.classList.replace('block', 'hidden')
        document.querySelector('button[type="submit"]').disabled = true
        const tableHeader = document.getElementById('table_header');
        const tableBody = document.getElementById('table_body');
        tableHeader.innerHTML = '';
        tableBody.innerHTML = '';
        queryError.innerHTML = '';

        const invoiceTable = {
            header: ['Date', 'Invoice number#', 'Customer', 'Status', 'Due date', 'Amount', 'Balance'],
            fields: ['creation_date', 'invoice_number', 'customer_name', 'status', 'due_date', 'amount', 'balance']
        }
        const creditNoteTable = {
            header: ['Date', 'CN Number#', 'Customer', 'Status', 'Amount', 'Balance'],
            fields: ['creation_date', 'number', 'customer_name', 'status', 'amount', 'balance']
        }

        if (receiptType === 'invoice') {
            invoiceTable.header.forEach(header => {
                tableHeader.innerHTML += `<th scope="col" class="text-blue-550 p-4 border-none font-semibold cursor-pointer">
                        <span class="flex items-center">${header}</span>
                    </th>`
            })
        } else {
            creditNoteTable.header.forEach(header => {
                tableHeader.innerHTML += `<th scope="col" class="text-blue-550 p-4 border-none font-semibold cursor-pointer">
                        <span class="flex items-center">${header}</span>
                    </th>`
            })
        }

        try {
            const response = await fetch(`/${receiptType}`, {
                method: 'POST',
                headers: {
                    'Content-type': 'application/json'
                },
                body: JSON.stringify({ startDate, endDate, pageSize, pageNumber })
            }).then(response => response.json())
            total = response.total

            if (!response.invoices?.length && !response.credit_notes?.length) {
                eval('debugger')
                queryError.innerHTML = `No ${receiptType} found`
                spinner.classList.replace('block', 'hidden')
            }

            if (receiptType === 'invoice' && response.invoices.length) {
                localStorage.setItem('ab_data', JSON.stringify(response))
                total_page.innerHTML = `${Math.ceil(total / pageSize)}`
                response.invoices.forEach(record => {
                    const tr = document.createElement("tr");
                    tr.className = "whitespace-nowrap border-b border-gray-200 odd:bg-white even:bg-slate-50 hover:bg-black/7 p-6";
                    invoiceTable.fields.forEach(field => {
                        const td = document.createElement("td");
                        td.className = "cursor-pointer py-2 px-4 font-normal text-black";
                        td.textContent = record[field];
                        tr.appendChild(td);
                    });
                    spinner.classList.replace('block', 'hidden')
                    action_buttons.classList.replace('hidden', 'block')
                    tableBody.appendChild(tr);
                })
            } else if (response.credit_notes?.length) {
                localStorage.setItem('ab_data', JSON.stringify(response.credit_notes))
                total_page.innerHTML = `${Math.ceil(total / pageSize)}`
                response?.credit_notes.forEach(record => {
                    const tr = document.createElement("tr");
                    tr.className = "whitespace-nowrap border-b border-gray-200 odd:bg-white even:bg-slate-50 hover:bg-black/7 p-6";
                    creditNoteTable.fields.forEach(field => {
                        const td = document.createElement("td");
                        td.className = "cursor-pointer py-2 px-4 font-normal text-black";
                        td.textContent = record[field];
                        tr.appendChild(td);
                    });
                    spinner.classList.replace('block', 'hidden')
                    action_buttons.classList.replace('hidden', 'block')
                    tableBody.appendChild(tr);
                })
            }
            document.querySelector('button[type="submit"]').disabled = false
        } catch (e) {
            spinner.classList.replace('block', 'hidden')
            action_buttons.classList.replace('hidden', 'block')
            queryError.innerHTML = `Error while retrieving ${receiptType}`
            document.querySelector('button[type="submit"]').disabled = false
        }
    }

    function isMoreThan30Days(inputDate) {
        const today = new Date();
        const thirtyDaysBefore = new Date();
        thirtyDaysBefore.setDate(today.getDate() - 30);

        return new Date(inputDate) < thirtyDaysBefore;
    }

    function send() {
        const items = localStorage.getItem('ab_data')
        console.log(`Items ===> ${items}`)
    }

    function reload(event) {
        pageSize = event.target.value;
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const receiptType = document.querySelector('input[name="receiptType"]:checked').value;
        retrieve(receiptType, startDate, endDate, pageSize, pageNumber)
    }

    function moveToPage(type) {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const receiptType = document.querySelector('input[name="receiptType"]:checked').value;
        if (type === 'next' && total !== 0 && pageNumber < Math.ceil(total/pageSize)) {
            pageNumber++
            current_page.innerHTML = `${pageNumber}`
            retrieve(receiptType, startDate, endDate, pageSize, pageNumber)
        } else if (type === 'previous' && pageNumber > 1) {
            pageNumber--
            current_page.innerHTML = `${pageNumber}`
            retrieve(receiptType, startDate, endDate, pageSize, pageNumber)
        }
    }
</script>
</body>
</html>